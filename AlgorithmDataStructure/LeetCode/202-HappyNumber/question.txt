
202. 快乐数

编写一个算法来判断一个数 n 是不是快乐数。

「快乐数」定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。如果 可以变为  1，那么这个数就是快乐数。
如果 n 是快乐数就返回 True ；不是，则返回 False 。


示例：
输入：19
输出：true
解释：
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1




方法一
借助 Set 存储每次的平方和，有重复的返回 false，没有添加到 Set 中，直到平方和为 1

方法二
快慢指针。
这个不用创建链表，慢指针 每次计算一个值，快指针 计算一个值后再在该值基础上再计算一次，然后观察 快慢是否相等，或者为 1


方法三
3 位数字最大 999 平方和 = 243
9999999999999 --> 1053
4 位或 4 位以上的数字在每一步都会丢失一位，直到降到 3 位为止。所以我们知道，最坏的情况下，算法可能会在 243 以下的所有数字上循环，然后回到它已经到过的一个循环或者回到 1。但它不会无限期地进行下去。

下一个值可能比自己大的最大数字是什么？根据我们之前的分析，我们知道它必须低于 243。因此，我们知道任何循环都必须包含小于 243 的数字，用这么小的数字，编写一个能找到所有周期的强力程序并不困难。

如果这样做，您会发现只有一个循环：4 -> 16 -> 37 -> 58 -> 89 -> 145 -> 42 -> 20 ->4。所有其他数字都在进入这个循环的链上，或者在进入 1 的链上。

if (n == 4 || n == 16 || n == 37 || n == 58 || n == 89 || n == 145 || n == 42 || n == 20) { return false; }





