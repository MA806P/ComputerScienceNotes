

300. 最长上升子序列


给定一个无序的整数数组，找到其中最长上升子序列的长度。

示例:
输入: [10,9,2,5,3,7,101,18]
输出: 4 
解释: 最长的上升子序列是 [2,3,7,101]，它的长度是 4。

说明:
可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。
你算法的时间复杂度应该为 O(n^2) 。
进阶: 你能将算法的时间复杂度降低到 O(n log n) 吗?




//方法一，动态规划
/*
 取后面固定位置，从前遍历小于它的最大值+1
        10  9  2  5  3  7  101  18  6
 dp     1   1  1  2  2  3   4   4   3
 max = 4
 
*/
时间复杂度为 O(n^2)
空间复杂度：O(n)，需要额外使用长度为 n 的 dp 数组。



//方法二，贪心算法+二分查找
/*
 贪心，如果我们要使上升子序列尽可能的长，则我们需要让序列上升得尽可能慢，
 因此我们希望每次在上升子序列最后加上的那个数尽可能的小。
 10,9,2,5,3,7,101,18
 
 num = 10   [0,10]
 num = 9     [0,9]  替换 10
 num = 2     [0,2]   替换 9
 num = 5     [0,2,5] 直接添加
 num = 3     [0,2,3] 替换 5
 num = 7     [0,2,3,7]  直接添加
 num = 101  [0,2,3,7,110] 直接添加
 num = 18    [0,2,3,7,18] 替换 101
 len = 4
 */
时间复杂度为 O(nlogn)。
空间复杂度：O(n)，需要额外使用长度为 n 的 d 数组。





