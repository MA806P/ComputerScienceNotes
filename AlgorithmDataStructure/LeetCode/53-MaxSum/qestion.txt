
53-最大子序和
给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。

示例:
输入: [-2,1,-3,4,-1,2,1,-5,4],
输出: 6
解释: 连续子数组 [4,-1,2,1] 的和最大，为 6。





方法一，暴力解法
寻找所有可能的子序和，求得最大值。
[-2] [-2,1] [-2,1,-3]...
[1] [1,-3] [1,-3,4]...
...
时间复杂度O(n^2) 空间复杂度O(1)



方法二，动态规划法
dp[i] 表示 nums 中 0到i 的最大子序和
dp[0]=nums[0]
dp[i]=max(dp[i-1]+nums[i], nums[i]) 
示例：
nums[] = [-2,1,-3,4,-1,2,1,-5,4]
dp[]   = [-2,1,-2,4,3,5,6,1,5] 最大值为 6
6是怎么来的，dp[6] = 6 = max(5+1,1) = 5+1 = ... = 4-1+2+1;
时间复杂度O(n) 空间复杂度O(n)可优化至O(1)



方法三，贪心算法
一个个数字加过去得sum，如 sum<0 放弃前面的重新开始继续依次加下去，比较记录下最大值，就是最后的结果
示例：
nums[] = [-2,1,-3,4,-1,2,1,-5,4]
sum    =  -2 1 -2 4  3 5 6  1 5  
max    =  -2 1  1 4  4 5 6  6 6
时间复杂度O(n) 空间复杂度O(1)



这道题，动态规划 贪心算法，这两个方法其实 dp[] sum 的结果是一样的，dp[i-1]+nums[i] < nums[i] => dp[i-1]<0 => sum<0
sum 为正数时，加上当前的数才会变大，相加才能得到最大值，否则不用相加，还没当前的数大呢，之前加的舍弃，最大值已记录，不用担心前面最大值丢了。正数增益。
若都是负数，就相当于，遍历找到最大的那个负数。
 



方法四，分治法
取数组中心，最大子序要么全在中心左边，要么全在右边，要么左右都有跨中心。三种情况。
跨中心的情况，在分治成中心和左右侧最大子序问题。
示例：
nums[] = [-2,1,-3,4,-1,2,1,-5,4] => max(6,4,4)=6

cross: [-2,1,-3,4,-1,2,1,-5,4] 
	包含左右子数组且含中间的数的最大值，左部分包含中间的数-1，左最大(4-1)+右最大(2+1)=6。
	这个可遍历直接算出来，不用递归。
left : [-2,1,-3,4,-1] => 递归。分左中右，max(-2,2,4) = 4
	cross:[-2,1,-3,4,-1] => 左最大(1-3)+右最大(4)=2
	left :[-2,1,-3] => [-2]=-2 [-3]=-3 [-2,1,-3]=左最大(1)+右最大(-3)=-2 => max(-2,-3,-2)=-2
	right:[4,-1] => [4]=4 [-1]=-1 [4,-1]=左最大(4)+右最大(-1)=3 => max(4,-1,3)=4
right :[2,1,-5,4] => max(3,2,4)=4
	cross: [2,1,-5,4] => (2+1)+(-5+4)=2
	left:  [2,1] => [2]=2 [1]=1 [2,1]=3 => max(2,1,3)=3
	right: [-5,4] => [-5]=-5 [4]=4 [-5,4]=-1 => max(-5,4,-1)=4
时间复杂度O(nlogn) 空间复杂度O(logn)





